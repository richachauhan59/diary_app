{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","Date","date","setDate","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","uuid","text","style","margin","type","onChange","target","value","rows","cols","placeholder","name","ref","Todo","todos","removeTodo","completeTodo","updatedTodo","edit","setEdit","map","todo","index","cursor","width","onClick","TodoList","setTodos","newTodos","setNewTodos","status","setStatus","setWeek","setMonth","setYear","todoId","newValue","test","prev","item","removeArr","filter","updatedTodos","isComplete","sortBy","arr_copy","reverse","minHeight","height","float","for","marginBottom","console","log","getDay","dateFilter","length","monthFilter","split","yearFilter","color","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ada66682.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\nimport {v4 as uuid} from 'uuid'\n\nexport default function TodoForm(props) {\n    const [input, setInput] = useState('')\n    var today = new Date();  \n    const [date, setDate] = useState('')\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = (e) => {\n        setInput(e.target.value)\n    }\n    const handleDate = (e) => {\n        setDate(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: uuid(),\n            text: input,\n            date: date\n        })\n        setInput('')\n    }\n    // today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+' :: '+today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds()\n\n    return (\n        <div>\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\n                <div style={{margin:\"30px\"}}>\n                    <input className=\"todo-input\"\n                    type=\"date\" \n                    onChange={handleDate}\n                    value={date}\n                    />\n                </div>\n                <div>\n                <textarea rows=\"4\" cols=\"50\"\n                placeholder=\"Enter text here...\" \n                value={input} name=\"text\" \n                className=\"todo-input\" \n                onChange={handleChange}\n                ref={inputRef}\n                />\n                <button type=\"submit\" className=\"todo-button\" >Add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n","import React,{useState} from 'react'\nimport TodoForm from './TodoForm'\nimport {RiCloseCircleLine} from 'react-icons/ri'\nimport {TiEdit} from 'react-icons/ti'\n\nfunction Todo({todos, completeTodo, removeTodo, updatedTodo }) {\n    const [edit, setEdit] = useState({\n        id:null,\n        value:\"\"\n    })\n\n    const submitUpdate = (value) => {\n        updatedTodo(edit.id, value)\n        setEdit({\n            id:null,\n            value:''\n        })\n    }\n\n    if(edit.id){\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div className=\"card\" style={{cursor:\"pointer\",width: \"98%\"}} className=\"todo-row\" key={index} >\n            <div className=\"card-header\">\n                <h6 className=\"todo-date\">\n                    {todo.date}\n                </h6>\n\n                <h6 className=\"icons\">\n                    <RiCloseCircleLine\n                    onClick={() => removeTodo(todo.id)}\n                    className='delete-icon'\n                    />\n                    <TiEdit\n                    onClick={() => setEdit({id: todo.id, value: todo.text})}\n                    className='edit-icon' \n                    />\n                </h6>\n            </div>\n            <div className=\"card-body\" key={todo.id} >\n                {todo.text}\n            </div>\n            \n        </div>\n    ))\n}\n\nexport default Todo\n","import React,{useState} from 'react'\nimport { RiAlarmWarningLine } from 'react-icons/ri'\nimport Todo from './Todo'\nimport TodoForm from './TodoForm'\n\nexport default function TodoList() {\n    const [todos, setTodos] = useState([])\n    const [newTodos, setNewTodos] = useState([])\n    const [status, setStatus] = useState(false)\n    const [week, setWeek] = useState('')\n    const [month, setMonth] = useState('')\n    const [year, setYear] = useState('')\n    \n    \n    \n    const addTodo = (todo) => {\n        if(!todo.text || /^\\s*$/.test(todo.test)){\n            return\n        }\n        const newTodos = [todo, ...todos]\n\n        setTodos(newTodos)\n    }\n\n    const updatedTodo = (todoId, newValue) =>{\n        if(!newValue.text || /^\\s*$/.test(newValue.test)){\n            return\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n    const removeTodo = (id) => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n        setTodos(removeArr)\n    }\n\n    const completeTodo = (id) => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos)\n    }\n\n    const sortBy = (e) => {\n        const arr_copy=[...todos]\n        if(e.target.value === \"oldest\"){\n            setTodos(arr_copy.reverse())\n        }\n        else if(e.target.value === \"newest\"){\n            setTodos(arr_copy.reverse())\n        }\n    }\n\n    const handleWeek = (e) => {\n        setWeek(e.target.value)\n        const arr_copy =  todos\n        console.log(e.target.value, todos.map(todo => (new Date(todo.date).getDay())))\n        if(e.target.value == \"Default\"){\n            setStatus(false)\n            setNewTodos(arr_copy)\n        }\n        else{\n            // console.log(new Date(arr_copy[0].date).getDay())\n            let dateFilter = arr_copy.filter(todo => (new Date(todo.date).getDay()) == e.target.value)\n            console.log(dateFilter)\n            if(dateFilter.length == 0){\n                setStatus(true)\n            }\n            else{\n                setStatus(false)\n            }\n            setNewTodos(dateFilter)\n            \n        }\n    }\n\n\n    const handleMonth = (e) => {\n        setMonth(e.target.value)\n        const arr_copy =  todos\n        console.log(e.target.value, todos.map(todo => todo.date))\n        if(e.target.value == \"Default\"){\n            setStatus(false)\n            setNewTodos(arr_copy)\n        }\n        else{\n            let monthFilter = arr_copy.filter(todo => todo.date.split('-')[1] == e.target.value)\n            console.log(monthFilter)\n            if(monthFilter.length == 0){\n                setStatus(true)\n            }\n            else{\n                setStatus(false)\n            }\n            setNewTodos(monthFilter)\n            \n        }\n    }\n\n\n    const handleYear = (e) => {\n        setYear(e.target.value)\n        const arr_copy =  todos\n        console.log(e.target.value, todos.map(todo => todo.date))\n        if(e.target.value == \"Default\"){\n            setStatus(false)\n            setNewTodos(arr_copy)\n        }\n        else{\n            let yearFilter = arr_copy.filter(todo => todo.date.split('-')[0] == e.target.value)\n            console.log(yearFilter)\n            if(yearFilter.length == 0){\n                setStatus(true)\n            }\n            else{\n                setStatus(false)\n            }\n            setNewTodos(yearFilter)\n            \n        }\n    }\n\n    return (\n        <div>\n            \n            \n            <div className=\"todo-app\">\n                <h1>Add Daily Notes</h1>\n                <TodoForm onSubmit={addTodo} />\n            </div>\n            \n            <div className=\"todo-app\" style={{width:\"90%\", minHeight:\"200px\",height:\"auto\"}}>\n                <div className=\"header-container\">\n                    <div className=\"todo-header\" style={{float: \"left\"}}>\n                        <label className=\"label-header\" for=\"sortby\">Sort By:</label>\n\n                        <select onChange={sortBy} name=\"sortby\" id=\"sortby\">\n                            <option value=\"newest\">Newest First</option>\n                            <option value=\"oldest\">Oldest First</option>\n                        </select>\n                    </div>\n                \n                    <div className=\"todo-header\" style={{float: \"right\", marginBottom:\"30px\"}}>\n                        <label className=\"label-header\"  for=\"filterby\">Filter By:</label>\n                        \n                        <label className=\"filter-header\" for=\"filterbyweek\">Week:</label>\n                        <select onChange={handleWeek} name=\"week\" id=\"filterbyweek\">\n                            <option value=\"Default\">Default</option>\n                            {\n                                [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"].map((item, index) => ( <option value={index}>{item}</option>))\n                            }\n                        </select>\n\n                        <label className=\"filter-header\" for=\"filterbymonth\">Month:</label>\n                        <select onChange={handleMonth} name=\"Month\" id=\"filterbymonth\">\n                            <option value=\"Default\">Default</option>\n                            {\n                                [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map((item, index) => ( <option value={index} >{item}</option>))\n                            }\n                        </select>\n                        <label className=\"filter-header\" for=\"filterbyyear\">Year:</label>\n                        <select onChange={handleYear} name=\"Year\" id=\"filterbyyear\">\n                            {\n                                [\"Default\", 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020].map(item => ( <option value={item} >{item}</option>))\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"card-container\">\n\n                {\n                    status ? <p style={{color: \"#fffefe\", fontSize: \"xx-large\"}} >No data is found. Please enter the Data.</p> \n                    :\n                \n                    newTodos.length > 0 ? <Todo style={{cursor:\"pointer\"}}  todos={newTodos} completeTodo={completeTodo} removeTodo={removeTodo}  updatedTodo={updatedTodo} sortBy={sortBy} />\n                    :\n                    <Todo style={{cursor:\"pointer\"}}  todos={todos} completeTodo={completeTodo} removeTodo={removeTodo}  updatedTodo={updatedTodo} sortBy={sortBy} />\n                \n                }\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}